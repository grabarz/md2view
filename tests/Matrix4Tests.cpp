//----------------------------------------------------------------------------------------------------
#include <iostream>
#include <boost/test/unit_test.hpp>

#include <Float.hpp>
#include <Matrix4.hpp>
#include <Vector4.hpp>
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_SUITE(MathMatrix4Tests)
//----------------------------------------------------------------------------------------------------

using namespace MD2View;
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(CompareTest)
{
	Matrix4<double> m {2.0, 4.5, 2.4, 5.5, 9.2, 4.6, 4.2, 1.3, 4.7, 4.3, 3.2, 4.5, 5.4, 5.2, 7.1, 0.3};
	Matrix4<double> mm {2.0, 4.5, 2.4, 5.5, 9.2, 4.6, 4.2, 1.3, 4.7, 4.3, 3.2, 4.5, 5.4, 5.2, 7.1, 0.3};
	Matrix4<double> n {2.0, 4.5, 2.41, 5.5, 9.2, 4.6, 4.2, 1.3, 4.7, 4.3, 3.2, 4.5, 5.4, 5.2, 7.1, 0.3};

	BOOST_CHECK(m.equals(mm));
	BOOST_CHECK(mm.equals(m));
	BOOST_CHECK(m.equals(m));
	BOOST_CHECK(!n.equals(m));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(ZeroTest)
{
	Matrix4<double> m(0.0);
	Matrix4<double> mm {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};

	BOOST_CHECK(m.equals(mm));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(CopyConstructorTest)
{
	Matrix4<double> m {2.0, 4.5, 2.4, 5.5, 9.2, 4.6, 4.2, 1.3, 4.7, 4.3, 3.2, 4.5, 5.4, 5.2, 7.1, 0.3};
	Matrix4<double> mm(m);

	BOOST_CHECK(m.equals(mm));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(DiagonalTest)
{
	Matrix4<double> m(5.0);
	Matrix4<double> mm {5.0, 0.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0,
			0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 5.0};

	BOOST_CHECK(m.equals(mm));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(MakeFromColumnsTest)
{
	Vector4<double> v1 {-2.0, 3.3, 4.5, -1.0};
	Vector4<double> v2 {3.5, 2.3, -8.4, 7.7};
	Vector4<double> v3 {7.4, -3.5, 4.5, -2.2};
	Vector4<double> v4 {2.4, 3.4, -8.5, 2.1};

	auto m = Matrix4<double>::fromColumns(v1, v2, v3, v4);
	Matrix4<double> mm {-2.0, 3.3, 4.5, -1.0, 3.5, 2.3, -8.4, 7.7,
			7.4, -3.5, 4.5, -2.2, 2.4, 3.4, -8.5, 2.1};

	BOOST_CHECK(m.equals(mm));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(MakeFromRowsTest)
{
	Vector4<double> v1 {-2.0, 3.3, 4.5, -1.0};
	Vector4<double> v2 {3.5, 2.3, -8.4, 7.7};
	Vector4<double> v3 {7.4, -3.5, 4.5, -2.2};
	Vector4<double> v4 {2.4, 3.4, -8.5, 2.1};

	Matrix4<double> m = Matrix4<double>::fromRows(v1, v2, v3, v4);
	Matrix4<double> mm {-2.0, 3.5, 7.4, 2.4, 3.3, 2.3, -3.5, 3.4,
			4.5, -8.4, 4.5, -8.5, -1.0, 7.7, -2.2, 2.1};

	BOOST_CHECK(m.equals(mm));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(AtTest)
{
	Matrix4<double> m {-2.0, 3.5, 7.4, 3.3, 2.3, -3.5, 4.5, -8.4,
			4.5, 2.4, 3.2, 8.5, 7.5, 4.3, 9.1, 1.1};

	BOOST_CHECK(FloatEqual<double>(m.at(1, 0), 3.5));
	BOOST_CHECK(FloatEqual<double>(m.at(0, 1), 2.3));
	BOOST_CHECK(FloatEqual<double>(m.at(1, 2), 2.4));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(GetColumnTest)
{
	Matrix4<double> m {-2.0, 3.5, 7.4, 3.3, 2.3, -3.5, 4.5, -8.4,
			4.5, 2.4, 3.2, 8.5, 7.5, 4.3, 9.1, 1.1};

	BOOST_CHECK(m.column(0).equals({-2.0, 3.5, 7.4, 3.3}));
	BOOST_CHECK(m.column(2).equals({4.5, 2.4, 3.2, 8.5}));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(SetColumnTest)
{
	Matrix4<double> m {-2.0, 3.5, 7.4, 3.3, 2.3, -3.5, 4.5, -8.4,
			4.5, 2.4, 3.2, 8.5, 7.5, 4.3, 9.1, 1.1};
	Vector4<double> v {0.4, 3.7, -35.3, 3.5};

	BOOST_CHECK(m.setColumn(2, v).column(2).equals(v));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(GetRowTest)
{
	Matrix4<double> m {-2.0, 3.5, 7.4, 3.3, 2.3, -3.5, 4.5, -8.4,
			4.5, 2.4, 3.2, 8.5, 7.5, 4.3, 9.1, 1.1};

	BOOST_CHECK(m.row(0).equals({-2.0, 2.3, 4.5, 7.5}));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(SetRowTest)
{
	Matrix4<double> m {-2.0, 3.5, 7.4, 3.3, 2.3, -3.5, 4.5, -8.4,
			4.5, 2.4, 3.2, 8.5, 7.5, 4.3, 9.1, 1.1};
	Vector4<double> v {0.4, 3.7, -35.3, 1.1};

	BOOST_CHECK(m.setRow(2, v).row(2).equals(v));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(IncTest)
{
	Matrix4<double> m {-4.0, 7.0, 14.8, 6.6, 4.6, -7.0, 9.0, -16.8,
			9.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0};
	Matrix4<double> mn {-2.0, 3.5, 7.4, 3.3, 2.3, -3.5, 4.5, -8.4,
			4.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
	Matrix4<double> n {-2.0, 3.5, 7.4, 3.3, 2.3, -3.5, 4.5, -8.4,
			4.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};

	BOOST_CHECK(mn.inc(n).equals(m));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(DecTest)
{
	Matrix4<double> m {-4.0, 7.0, 14.8, 6.6, 4.6, -7.0, 9.0, -16.8,
			9.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0};
	Matrix4<double> mm {-2.0, 3.5, 7.4, 3.3, 2.3, -3.5, 4.5, -8.4,
			4.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};

	BOOST_CHECK(m.dec(mm).equals(mm));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(StaticMultiplyTest)
{
	Matrix4<double> m {1.0, 4.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0,
			4.0, 1.0, 5.0, 6.0, 3.0, 2.0, 1.0, 8.0};
	Matrix4<double> mm {3.0, -2.0, 0.0, 3.0, 9.0, 8.0, 3.0, 5.0,
			1.0, 2.0, 1.0, 7.0, 1.0, 3.0, 4.0, 3.0};
	Matrix4<double> mmm {3.0, -2.0, 0.0, 3.0, 9.0, 8.0, 3.0, 5.0,
			1.0, 2.0, 1.0, 7.0, 1.0, 3.0, 4.0, 3.000000000001};

	Matrix4<double> r {8.0, 12.0, 3.0, 24.0, 52.0, 73.0, 62.0, 100.0,
			30.0, 25.0, 20.0, 70.0, 32.0, 23.0, 34.0, 59.0};

	BOOST_CHECK(Matrix4<double>::multiply(m, mm).equals(r));
	BOOST_CHECK(!Matrix4<double>::multiply(m, mmm).equals(r));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(LeftMultiplyTest)
{
	Matrix4<double> m {1.0, 4.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0,
			4.0, 1.0, 5.0, 6.0, 3.0, 2.0, 1.0, 8.0};
	Matrix4<double> mm {3.0, -2.0, 0.0, 3.0, 9.0, 8.0, 3.0, 5.0,
			1.0, 2.0, 1.0, 7.0, 1.0, 3.0, 4.0, 3.0};

	Matrix4<double> r {8.0, 12.0, 3.0, 24.0, 52.0, 73.0, 62.0, 100.0,
			30.0, 25.0, 20.0, 70.0, 32.0, 23.0, 34.0, 59.0};

	m.lmul(mm);
	BOOST_CHECK(m.equals(r));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(RightMultiplyTest)
{
	Matrix4<double> m {1.0, 4.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0,
			4.0, 1.0, 5.0, 6.0, 3.0, 2.0, 1.0, 8.0};
	Matrix4<double> mm {3.0, -2.0, 0.0, 3.0, 9.0, 8.0, 3.0, 5.0,
			1.0, 2.0, 1.0, 7.0, 1.0, 3.0, 4.0, 3.0};

	Matrix4<double> r {8.0, 12.0, 3.0, 24.0, 52.0, 73.0, 62.0, 100.0,
			30.0, 25.0, 20.0, 70.0, 32.0, 23.0, 34.0, 59.0};

	mm.rmul(m);
	BOOST_CHECK(mm.equals(r));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(VectorMultiplyTest)
{
	Matrix4<double> m(1.0);
	Vector4<double> v(2.0, 3.0, 4.0, 0.2);
	Vector4<double> u(2.1, 3.1, 4.1, 0.12);

	BOOST_CHECK(Matrix4<double>::multiply(m, v).equals(v));
	BOOST_CHECK(!Matrix4<double>::multiply(m, v).equals(u));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(ScalarMultiplyTest)
{
	Matrix4<double> m {-4.0, 7.0, 14.8, 6.6, 4.6, -7.0, 9.0, -16.8,
			9.0, 3.5, 3.5, 4.7, 8.6, 4.2, 1.2, 3.1};
	Matrix4<double> r {-8.0, 14.0, 29.6, 13.2, 9.2, -14.0, 18.0, -33.6,
			18.0, 7.0, 7.0, 9.4, 17.2, 8.4, 2.4, 6.2};

	BOOST_CHECK(m.mul(2.0).equals(r));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(DeterminantTest)
{
	Matrix4<double> m {1.0, 3.0, 2.0, 3.0, 2.0, 2.0, 1.0, 5.0,
			3.0, 1.0, 3.0, 6.0, 4.0, 3.0, 1.0, 1.0};

	BOOST_CHECK(m.det() == 106.0);
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(TransposeTest)
{
	Matrix4<double> m {1.0, 3.0, 2.0, 2.0, 2.0, 1.0, 3.0, 1.0,
			3.0, 1.0, 3.0, 4.0, 5.0, 3.0, 9.0, 7.0};
	Matrix4<double> mm {1.0, 2.0, 3.0, 5.0, 3.0, 1.0, 1.0, 3.0,
			2.0, 3.0, 3.0, 9.0, 2.0, 1.0, 4.0, 7.0};
																	 
	BOOST_CHECK(Matrix4<double>::transpose(m).equals(mm));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(InverseTest)
{
	Matrix4<double> m {1.0, 3.0, 2.0, 3.0, 2.0, 1.0, 3.2, 1.0,
			3.0, 1.0, 3.0, 4.0, 5.0, 3.0, 1.0, 7.2};
	Matrix4<double> mm = Matrix4<double>::inverse(m);
	Matrix4<double> id(1.0);

	Matrix4<double> xxx = Matrix4<double>::multiply(mm, m);

	BOOST_CHECK(xxx.equals(id, 0.000000000001));
}
//----------------------------------------------------------------------------------------------------

BOOST_AUTO_TEST_SUITE_END()
//----------------------------------------------------------------------------------------------------
